version: "3.8"

services:
  frontend-prod:
    depends_on:
      - db
      - redis
    build:
      context: .${NEXT_DIRECTORY}
      target: runner
    command: npm run start
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
    networks:
      - locallan

  frontend-dev:
    depends_on:
      - db
      - redis
    build:
      context: .${NEXT_DIRECTORY}
      target: deps
    volumes:
      - .${NEXT_DIRECTORY}:/app
      - .${NEXT_DIRECTORY}/node_modules:/app/node_modules
      - .${NEXT_DIRECTORY}/.next:/app/.next
    command: npm run dev
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: development
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
    networks:
      - locallan

  backend:
    depends_on:
      - db
      - redis
    build:
      context: .${DJANGO_DIRECTORY}
    command: "chmod -x /app/docker-entrypoint.sh ; ./app/docker-entrypoint.sh ;"
    volumes:
      - .${DJANGO_DIRECTORY}:/app
    ports:
      - "8000:8000"
    environment:
      DJANGO_EXECUTION_DIRECTORY: ${DJANGO_EXECUTION_DIRECTORY}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE} 
      POSTGRES_USERNAME: ${POSTGRES_USERNAME} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_URL: ${REDIS_URL}
    networks:
      - locallan

  db:
    image: postgres:15.3-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - postgresdb:/var/lib/postgresql/data
      # Uncomment if you actually have sql schema you'd like to insert
      # On second thought, it probably makes more sense to let Django handle it all. Your call.
      # - db/init.sql:docker-entrypoint-initdb.d/create_tables.sql 
    networks:
      - locallan
  
  redis:
    restart: always
    image: redis:7-alpine
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    depends_on:
      - db
    volumes:
      - rediscache:/data
    networks:
      - locallan

networks:
  locallan:
    driver: bridge

volumes:
  postgresdb:
    driver: local
  rediscache:
    driver: local
